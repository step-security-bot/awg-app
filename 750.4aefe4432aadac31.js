"use strict";(self.webpackChunkawg_app=self.webpackChunkawg_app||[]).push([[750],{4750:(h,o,e)=>{e.r(o),e.d(o,{StructureViewModule:()=>u});var r=e(655),n=e(4650),l=e(8453),s=e(5867);let t=class{constructor(p){this.router=p,this.structureViewTitle="Datenstrukturmodell",this.structureViewId="awg-structure-view"}ngOnInit(){this.routeToSidenav()}routeToSidenav(){this.router.navigate([{outlets:{side:"structureInfo"}}],{preserveFragment:!0,queryParamsHandling:"preserve"})}};t.ctorParameters=()=>[{type:s.F0}],t=(0,r.gn)([(0,n.wA2)({selector:"awg-structure-view",template:'\x3c!-- content: structure --\x3e\n\n\x3c!-- heading --\x3e\n<awg-heading [title]="structureViewTitle" [id]="structureViewId"></awg-heading>\n\n\x3c!-- description --\x3e\n<p>\n    Das Modell zeigt die f\xfcr eine AWG-Online-Edition projektierte Datenstruktur, die zur Zeit intern in der\n    Webern-SALSAH-Datenbank implementiert wird.\n</p>\n\n<p>\n    Die erforderlichen Objektklassen und Eigenschaften werden von SALSAH intern als RDF (<a\n        href="https://www.w3.org/RDF/"\n        >Resource Description Framework</a\n    >) Triple verwaltet. Sie sind in der Grafik als Ellipsen symbolisiert, deren Verkn\xfcpfungen und Verweise\n    untereinander als Pfeile dargestellt.\n</p>\n\n<p>\n    Komplexere Objektstrukturen, wie die aus mehreren Unter- oder Einzelobjekten zu modellierenden Notentexte oder\n    Kritischen Berichte, sind als Gruppen zusammengefasst. Zudem sind die Schnittstellen zum dokumentarischen Bereich\n    der Webern-SALSAH-Datenbank angedeutet.\n</p>\n\n\x3c!-- svg graphic of structure --\x3e\n<svg\n    version="1.1"\n    xmlns="https://www.w3.org/2000/svg"\n    xmlns:xlink="https://www.w3.org/1999/xlink"\n    viewBox="0 0 1980 1980"\n    id="structure">\n    <image xlink:href="assets/img/WebernGraph.svg" src="assets/img/WebernGraph.png" width="1980" height="1980" />\n</svg>\n',changeDetection:n.n4l.OnPush,styles:[""]})],t);const w=[{path:"",component:t,data:{title:"AWG Online Edition \u2013 Structure"}}],g=[t];let i=class{};i=(0,r.gn)([(0,n.LVF)({imports:[s.Bz.forChild(w)],exports:[s.Bz]})],i);let u=class{};u=(0,r.gn)([(0,n.LVF)({imports:[l.m,i],declarations:[g]})],u)}}]);